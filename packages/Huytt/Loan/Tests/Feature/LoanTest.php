<?php

namespace Huytt\Loan\Tests\Unit;

use Huytt\Auth\Tests\Feature\AuthTest;
use Huytt\Loan\Repositories\LoanRepository;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class LoanTest extends TestCase
{
    use DatabaseTransactions, WithFaker;

    /** @var LoanRepository */
    protected $repository;
    protected $authTest;

    protected $token;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = new LoanRepository($this->app);
        $this->authTest = new AuthTest();
        $this->authTest->setUp();
        $this->setUpFaker();
    }

    public function testStore()
    {
        $payload = [
            "amount" => 10000,
            "term" => 3
        ];

        $reponse = $this
            ->json('post', 'api/v1/loans/me/store', $payload);

        $reponse->assertStatus(401);

        $token = $this->authTest->testUserAuth();

        $reponse = $this
            ->withHeader('Authorization', 'Bearer '. $token)
            ->json('post', 'api/v1/loans/me/store', $payload);

//        echo json_encode($reponse)."\n";
        $reponse->assertStatus(201);

        $id = $reponse->decodeResponseJson()['data']['id'];
        $loan = $this->repository->with(['scheduledPayments'])->find($id);
        $this->assertEquals($payload['amount'], $loan->amount);
        $this->assertEquals(3, count($loan->scheduledPayments));

        return array_merge($payload, ['id' => $id]);
    }

    public function testMeList() {
        $this->testStore();

        $reponse = $this
            ->json('get', 'api/v1/loans/me/list');

//        echo json_encode($reponse)."\n";
        $reponse->assertStatus(200);
        $reponse->assertJsonStructure([
            'data' => [
                'items' => [
                    [
                        'id',
                        'user_id',
                        'amount',
                        'term',
                        'status',
                        'frequency',
                        'scheduled_payments' => [
                            [
                                'id',
                                'loan_id',
                                'amount',
                                'amount_paid'
                            ]
                        ]
                    ]
                ]
            ]
        ]);
    }

//    public function testApprove() {
//        $token = $this->authTest->testAdminUserAuth();
//        $info = $this->testStore();
//        $id = $info['id'];
////
////        $reponse = $this
////            ->json('put', "api/v1/loans/admin/approve/$id");
////
////        echo json_encode($reponse)."\n";
////        $reponse->assertStatus(401);
//
//
//        $reponse = $this
//            ->withHeader('Authorization', 'Bearer '. $token)
//            ->json('put', "api/v1/loans/admin/approve/$id");
//
//        $reponse->assertStatus(204);
//
//    }
}
