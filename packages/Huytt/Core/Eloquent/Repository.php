<?php

namespace Huytt\Core\Eloquent;

use Illuminate\Support\Facades\Log;
use Huytt\Core\Events\RepositoryEntityTouch;
use Huytt\Core\Helpers\CacheKeys;
use Huytt\Core\Traits\CacheableRepository;
use PDOException;
use Prettus\Repository\Contracts\CacheableInterface;
use Prettus\Repository\Contracts\CriteriaInterface;
use Prettus\Repository\Eloquent\BaseRepository;
use Prettus\Repository\Events\RepositoryEntityCreating;
use Prettus\Repository\Events\RepositoryEntityUpdated;
use Prettus\Validator\Contracts\ValidatorInterface;
use Prettus\Validator\Exceptions\ValidatorException;

abstract class Repository extends BaseRepository implements CacheableInterface {

    use CacheableRepository;

    protected $touchs = [];

    /**
     * Find data by field and value
     *
     * @param  string  $field
     * @param  string  $value
     * @param  array  $columns
     * @return mixed
     */
    public function findOneByField($field, $value = null, $columns = ['*'])
    {
        $model = $this->findByField($field, $value, $columns = ['*']);

        return $model->first();
    }

    /**
     * Find data by field and value
     *
     * @param  string  $field
     * @param  string  $value
     * @param  array  $columns
     * @return mixed
     */
    public function findOneWhere(array $where, $columns = ['*'])
    {
        $model = $this->findWhere($where, $columns);

        return $model->first();
    }


    /**
     * Find data by id
     *
     * @param  int  $id
     * @param  array  $columns
     * @return mixed
     */
    public function findOrFail($id, $columns = ['*'])
    {
        $this->applyCriteria();
        $this->applyScope();
        $model = $this->model->findOrFail($id, $columns);
        $this->resetModel();

        return $this->parserResult($model);
    }

    /**
     * @param  string  $columns
     * @return mixed
     */
    public function sum($columns)
    {
        $this->applyCriteria();
        $this->applyScope();

        $sum = $this->model->sum($columns);
        $this->resetModel();

        return $sum;
    }

    /**
     * @param  string  $columns
     * @return mixed
     */
    public function avg($columns)
    {
        $this->applyCriteria();
        $this->applyScope();

        $avg = $this->model->avg($columns);
        $this->resetModel();

        return $avg;
    }

    public function paginateWhere(array $where, $perPage = null, $columns = ['*'], $method = 'paginate', $sortbyField = null, $direction = 'asc', $path = null, $page = null, $pageName = 'page')
    {
        $limit = $perPage;
        $this->applyCriteria();
        $this->applyScope();
        $limit = is_null($limit) ? config('repository.pagination.limit', 15) : $limit;
        $this->applyConditions($where);
        $results = $this->model->{$method}($limit, $columns);
        $results->appends(app('request')->query());
        $this->resetModel();

        return $this->parserResult($results);
    }

    /**
     * Apply criteria in current Query
     *
     * @return $this
     */
    protected function applyCriteria()
    {
        if ($this->skipCriteria === true) {
            return $this;
        }

        $criteria = $this->getCriteria();

        if ($criteria) {
            foreach ($criteria as $c) {
                if ($c instanceof CriteriaInterface) {
                    $this->model = $c->apply($this->model, $this);
                }
            }
        }

//        dd($this->getSql($this->model->toSql(),$this->model->getBindings()));
        return $this;
    }

    public function lastInsertId() {
        return $this->model->lastInsertId();
    }


    /**
     * Clear cache
     *
     * @return void
     */
    public function clearCache($ignoreTouch = false)
    {
        $keys = CacheKeys::getKeys(get_called_class());

        foreach ($keys as $key) {
            $this->getCacheRepository()->forget($key);
        }

        if(!$ignoreTouch) {
            event(new RepositoryEntityTouch($this->getTouchRepositoryClass()));
        }

    }

    public function getTouchRepositoryClass() {
        return $this->touchs;
    }

    public function updateOrCreate(array $attributes, array $values = [], array $primary = [])
    {
        try {
            return parent::updateOrCreate($attributes, $values); // TODO: Change the autogenerated stub
        } catch (\Exception $e) {
            if(count($primary)) {
                $model = $this->findOneWhere($primary);
                if($model) {
                    $model->fill($attributes);
                    $model->save();

                    $this->resetModel();
                    return $this->parserResult($model);
                }
            }

            throw $e;
        }
    }

    /**
     * @param $limit
     * @param $columns
     * @param $method
     * @param $personalId
     * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator|\Illuminate\Support\Collection|mixed
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     */
    public function paginate($limit = null, $columns = ['*'], $method = 'paginate', $personalId = null)
    {
        if (!$this->allowedCache('paginate') || $this->isSkippedCache()) {
            return parent::paginate($limit, $columns, $method);
        }

        $key = $personalId ? $this->getCacheKey('paginate', func_get_args()) : $this->getCacheKey('paginate', array_merge(func_get_args(), [
            'personalId' => auth()->user()->personalID ?? null
        ]));

        $time = $this->getCacheTime();
        $value = $this->getCacheRepository()->remember($key, $time, function () use ($limit, $columns, $method) {
            return parent::paginate($limit, $columns, $method);
        });

        $this->resetModel();
        $this->resetScope();
        return $value;
    }

    public function chunk($limit, callable $callback)
    {
        $this->applyCriteria();
        $this->applyScope();

        $presenterFunction = \Closure::bind(function($results,$page) use (&$callback) {
            $this->resetModel();
            $this->resetScope();

            return $callback($this->parserResult($results), $page);
        }, $this);

        return $this->model->chunk($limit, $presenterFunction);
    }

    /**
     * Insert new records or update the existing ones.
     *
     * @param  array  $values
     * @param  array|string  $uniqueBy
     * @param  array|null  $update
     * @return int
     */
    public function upsert(array $values, $uniqueBy, $update = null): int
    {
        return $this->model->upsert($values, $uniqueBy, $update);
    }
}
